# Build a static library (libmylib.a) and link with main.c                  
CC := cc                                           # C compiler for compilation and linking
AR := ar                                           # Archiver used to create static libraries
ARFLAGS := rcs                                     # 'rcs' = replace/insert, create if needed, write index
CFLAGS := -Wall -Wextra -O2 -MMD -MP               # Compile flags with dependency generation
SRC_DIR := src                                     # Directory containing library source files
BUILD := build                                     # Root build directory for objects and deps
LIB := libmylib.a                                  # Name of the static library to produce
LIB_SRCS := $(SRC_DIR)/foo.c $(SRC_DIR)/bar.c      # Source files that will go into the library
LIB_OBJS := $(LIB_SRCS:%.c=$(BUILD)/%.o)           # Object files for the library placed under build/
APP := app                                         # Name of the final executable
APP_SRCS := main.c                                 # Source file for the application
APP_OBJS := $(APP_SRCS:%.c=$(BUILD)/%.o)           # Object file for the application under build/
DEPS := $(LIB_OBJS:.o=.d) $(APP_OBJS:.o=.d)        # All dependency files generated by -MMD
all: $(APP)                                        # Default target builds the app (which builds the lib as needed)
$(APP): $(APP_OBJS) $(LIB)                         # The app depends on its object(s) and the library
	$(CC) $^ -o $@                             # Link app object(s) with the static library into an executable
$(LIB): $(LIB_OBJS)                                # The library depends on all its object files
	$(AR) $(ARFLAGS) $@ $^                     # Create/update the static library archive with the object files
$(BUILD)/%.o: %.c | $(BUILD)/                      # Generic compile rule into build/ mirroring source tree
	@mkdir -p $(dir $@)                        # Ensure subdirectories in build/ exist (quiet '@' suppresses echo)
	$(CC) $(CFLAGS) -c $< -o $@                # Compile source to object with flags
$(BUILD)/:                                         # Rule to create the top-level build directory
	mkdir -p $@                                # Create directory if missing
-include $(DEPS)                                   # Pull in auto-generated dependencies (ignore if absent)
clean:                                             # Clean rule
	$(RM) -r $(BUILD) $(APP) $(LIB)            # Remove build dir, app binary, and the static library
